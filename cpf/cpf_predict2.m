function [V_predicted, lambda_predicted, J] = cpf_predict2(Ybus, ref, pv, pq, V, lambda, sigma, type_predict, initQPratio, participation, flag_lambdaIncrease)
%CPF_PREDICT  Do prediction in cpf.
%   [INPUT PARAMETERS]
%   type_predict: 1-predict voltage; 2-predict lambda
%   loadvarloc: (in internal bus numbering)
%   [OUTPUT PARAMETERS]
%   J: jacobian matrix for the given voltage profile (before prediction)
%   created by Rui Bo on 2007/11/12

%   MATPOWER
%   $Id: cpf_predict.m,v 1.4 2010/04/26 19:45:26 ray Exp $
%   by Rui Bo
%   Copyright (c) 2009-2010 by Rui Bo
%
%   This file is part of MATPOWER.
%   See http://www.pserc.cornell.edu/matpower/ for more info.
%
%   MATPOWER is free software: you can redistribute it and/or modify
%   it under the terms of the GNU General Public License as published
%   by the Free Software Foundation, either version 3 of the License,
%   or (at your option) any later version.
%
%   MATPOWER is distributed in the hope that it will be useful,
%   but WITHOUT ANY WARRANTY; without even the implied warranty of
%   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
%   GNU General Public License for more details.
%
%   You should have received a copy of the GNU General Public License
%   along with MATPOWER. If not, see <http://www.gnu.org/licenses/>.
%
%   Additional permission under GNU GPL version 3 section 7
%
%   If you modify MATPOWER, or any covered work, to interface with
%   other modules (such as MATLAB code and MEX-files) available in a
%   MATLAB(R) or comparable environment containing parts covered
%   under other licensing terms, the licensors of MATPOWER grant
%   you additional permission to convey the resulting work.


	%% set up indexing
	npv = length(pv);
	npq = length(pq);
	
	
	Vangles_pv = 1:npv;
	Vangles_pq = npv+1:npv+npq;
	Vmag_pq = npv+npq+1:npv+2*npq;
	lambdaIndex = npv+2*npq + 1;

	%% form current variable set from given voltage
	x_current = [ angle(V([pv;pq]));
				  abs(V(pq));
				  lambda];

	%% evaluate Jacobian, dF/d detla  and   dF/dV
	J = getJ(Ybus, V, pv, pq);

	%% form K based on participation factors. dF/d lambda
	K = [-participation(pv); -participation(pq); -participation(pq) .* initQPratio(pq)];


	%% form e  

	e = zeros(1, npv+2*npq+1);

	switch type_predict(1),
		case 1, %predict voltage
			e(npv+2*npq+1) = -1 + 2*(flag_lambdaIncrease == true);	
		case 2, %predict lambda
			%each bus has an angle, plus all PQ busses have a Voltage
			continuationBus = type_predict(2);%% [Anton] used type_predict to pass in bus value I want for voltage continuation

			e(npv + find(pq == continuationBus)) = -1;
			e(pv==continuationBus) = -1;
			
		otherwise %error
			fprintf('Error: unknow ''type_predict''.\n');
	end

	% form of e is expected to be [ delta * (#pv buses + #pq buses), v* #pq
	% buses) + 1]

	%% form b
	b = [zeros(npv+2*npq,1); 1];

	
	%% reformulated jacobian
	augJ = [J K ;   
			 e ];
			% now includes lambda

	%% calculate predicted variable set
	x_predicted = x_current + sigma*(augJ\b);

	%% convert variable set to voltage form
	V_predicted(ref, 1) = V([ref]); %reference bus voltage passes through
	V_predicted(pv, 1) = abs(V(pv)).* exp(sqrt(-1) * x_predicted(Vangles_pv) ); %apply new angle to 
	V_predicted(pq, 1) = x_predicted(Vmag_pq).* exp(sqrt(-1) * x_predicted(Vangles_pq) );
	lambda_predicted = x_predicted(lambdaIndex);

end

function J = getJ(Ybus, V, pv, pq)
% J = getJ(Ybus, V, pv, pq)
%
% getJ   get jacobian of power flow equations
%
%  This function gets the Jaciobian of the power flow equations at 
	[dSbus_dVm, dSbus_dVa] = dSbus_dV(Ybus, V);

	j11 = real(dSbus_dVa([pv; pq], [pv; pq]));
	j12 = real(dSbus_dVm([pv; pq], pq));
	j21 = imag(dSbus_dVa(pq, [pv; pq]));
	j22 = imag(dSbus_dVm(pq, pq));

	J = -[   j11 j12;
			j21 j22;    ];
	%% form augmented Jacobian
	%NOTE: the use of '-J' instead of 'J' is due to that the definition of
	%dP(,dQ) in the textbook is the negative of the definition in MATPOWER. In
	%the textbook, dP=Pinj-Pbus; In MATPOWER, dP=Pbus-Pinj. Therefore, the
	%Jacobians generated by the two definitions differ only in the sign.
end